{"meta":{"title":"宾家豪的个人博客","subtitle":"","description":"","author":"1729314899@qq.com","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"泛型练习","slug":"泛型练习","date":"2022-03-14T13:37:46.000Z","updated":"2022-03-14T13:38:07.103Z","comments":true,"path":"2022/03/14/泛型练习/","link":"","permalink":"http://example.com/2022/03/14/%E6%B3%9B%E5%9E%8B%E7%BB%83%E4%B9%A0/","excerpt":"","text":"package com.hespedi.generic; import java.util.*; &#x2F;** @author :宾家豪 @version 0.000001 @date： 21:04 2022&#x2F;3&#x2F;14 泛型入门 泛型举例说明 1.创建三个学生对象 2.放入到HashSet中学生对象 3.放入到HashMap中要求Key是String name，Value就是学生对象 4.使用两种方法遍历 *&#x2F;public class GenericExercise { public static void main(String[] args) { &#x2F;&#x2F;使用泛型是给HashSet三个学生对象 HashSet hashSet &#x3D; new HashSet(); hashSet.add(new Student(“jack”, 18)); hashSet.add(new Student(“tom”, 28)); hashSet.add(new Student(“mary”, 19)); for (Student student : hashSet) { System.out.println(student); } HashMap&lt;String, Student&gt; hashMap = new HashMap&lt;String, Student&gt;(); hashMap.put(&quot;milan&quot;,new Student(&quot;milan&quot;,28)); hashMap.put(&quot;smith&quot;,new Student(&quot;smith&quot;,48)); hashMap.put(&quot;hsp&quot;,new Student(&quot;hsp&quot;,28)); //迭代器 EntrySet /** * public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;&#125; * String 会给K Student 会给V */ Set&lt;Map.Entry&lt;String, Student&gt;&gt; entrSet = hashMap.entrySet(); /** * public final Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123; * return new EntryIterator(); * &#125; * k = String v =Student */ System.out.println(&quot;运行————————&quot;); Iterator&lt;Map.Entry&lt;String, Student&gt;&gt; iterator = entrSet.iterator(); while (iterator.hasNext()) &#123; Map.Entry&lt;String, Student&gt; next = iterator.next(); System.out.println(next.getKey()+next.getValue()); &#125; &#125; } class Student { private String name; private int age; public Student(String name, int age) &#123; this.name = name; this.age = age; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; @Override public String toString() &#123; return &quot;Student&#123;&quot; + &quot;name=&#39;&quot; + name + &#39;\\&#39;&#39; + &quot;, age=&quot; + age + &#39;&#125;&#39;; &#125; }","categories":[],"tags":[]},{"title":"泛型入门2","slug":"泛型入门2","date":"2022-03-14T13:36:45.000Z","updated":"2022-03-14T13:37:15.121Z","comments":true,"path":"2022/03/14/泛型入门2/","link":"","permalink":"http://example.com/2022/03/14/%E6%B3%9B%E5%9E%8B%E5%85%A5%E9%97%A82/","excerpt":"","text":"package com.hespedi.generic.improve; &#x2F;** @author :宾家豪 @version 0.000001 @date： 20:39 2022&#x2F;3&#x2F;14 注意&lt;&gt;泛型中的类型 只能是包装类 或者应用类型 泛型的声明 interface接口{} 和class 类&lt;K,V&gt; &#x2F;&#x2F;比如：List ，ArrayList 说明 1.其中，T,K,V不代表值，而是表示类型。 2.任意字母都可以，常用T表示，是Type的缩写 泛型的实例化 要在类名后面指定类型参数的值，比如： 1.list strList &#x3D; new ArrayList();举例说明 2.Iterator iterator &#x3D; customer.iterator(); &#x2F;public class Generic03 { public static void main(String[] args) { &#x2F;&#x2F;注意！：特别强调：E表示 s的数据类型，该数据类型在定义Person对象的时候指定的，即在编译期间，就确定了E是声明类型 Person person &#x3D; new Person(“韩顺平教育”); person.d();&#x2F;&#x2F;String &#x2F;* * 你可以这样理解，上面的Person类 * class Person { * String s;&#x2F;&#x2F;E表示 s的数据类型，该数据类型在定义Person对象的时候指定的，即在编译期间，就确定了E是声明类型 * * public Person(String s) {&#x2F;&#x2F;E也可以是参数类型 * this.s &#x3D; s; * } * public String f(){&#x2F;&#x2F;返回类型使用E * return s; * } * } &#x2F; Person person1 &#x3D; new Person(100); person1.d();&#x2F;&#x2F;integer &#x2F;* * class Person { * Integer s;&#x2F;&#x2F;E表示 s的数据类型，该数据类型在定义Person对象的时候指定的，即在编译期间，就确定了E是声明类型 * * public Person(Integer s) {&#x2F;&#x2F;E也可以是参数类型 * this.s &#x3D; s; * } * public Integer f(){&#x2F;&#x2F;返回类型使用E * return s; * } * } *&#x2F; }}&#x2F;&#x2F;泛型的作用是：可以在类声明时通过一个标识表示类中某个属性的类型&#x2F;&#x2F;或者是某个方法返回的类型，或者是参数类型class Person { E s;&#x2F;&#x2F;E表示 s的数据类型，该数据类型在定义Person对象的时候指定的，即在编译期间，就确定了E是声明类型 public Person(E s) &#123;//E也可以是参数类型 this.s = s; &#125; public E f()&#123;//返回类型使用E return s; &#125; public void d()&#123; System.out.println(s.getClass());//显示s的数据类型 &#125; }","categories":[],"tags":[]},{"title":"java 学习","slug":"java-学习","date":"2022-03-14T08:21:19.000Z","updated":"2022-03-14T08:23:05.103Z","comments":true,"path":"2022/03/14/java-学习/","link":"","permalink":"http://example.com/2022/03/14/java-%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"#此后这个博客记录本人的java学习##每天的学习笔记以及学习进度都会上传###加油","categories":[],"tags":[{"name":"宾家豪","slug":"宾家豪","permalink":"http://example.com/tags/%E5%AE%BE%E5%AE%B6%E8%B1%AA/"}]},{"title":"”hello“","slug":"”hello“","date":"2022-03-13T18:20:35.000Z","updated":"2022-03-14T06:41:37.056Z","comments":true,"path":"2022/03/14/”hello“/","link":"","permalink":"http://example.com/2022/03/14/%E2%80%9Dhello%E2%80%9C/","excerpt":"","text":"#你好这是我的第一篇博客##用于写入我的个人学习日记###欢迎观看也记录一下今天的写博客日程，哈哈哈，第一次使用这些软件迷迷糊糊，弄了好多bug，差不多弄了七八个小时多才弄好，哈哈，当你看见这篇博文时我已经弄好了，哈哈哈哈哈，释然了。祝你晚安，也祝我 console.error(\"Error: [hexo-tag-aplayer] Specified asset file not found ([picture_url,)\");","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"宾家豪","slug":"宾家豪","permalink":"http://example.com/tags/%E5%AE%BE%E5%AE%B6%E8%B1%AA/"}]}